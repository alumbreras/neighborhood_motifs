nrow(df.post.motif)
nrow(df.posts)
df.post.motif  <- res$posts.motifs
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
df.user.motifs <- acast(df.posts, user~motif)
motifs <- res$motifs
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
plot(motifs[[i]],
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
df.posts <- load_posts(database='reddit', forum='podemos')
nrow(df.posts)
source('~/Documents/PhD/src/Triads_based clustering/R/count_motifs.r')
source('~/Documents/PhD/src/Triads_based clustering/R/count_motifs.r')
source('~/Documents/PhD/src/Triads_based clustering/R/count_motifs.r')
###################################################
# Load data
###################################################
df.posts <- load_posts(database='reddit', forum='podemos')
df.threads <- plyr::count(df.posts, "thread")
df.users <- plyr::count(df.posts, 'user')
names(df.threads)[2] <- "length"
names(df.users)[2] <- "posts"
######################################################
# Count motifs in which each user appears
######################################################
# deprecated
#res <- count_motifs(df.threads$thread, database='reddit')
#df.user.motifs <- as.data.frame(res$user.motifs)
#df.post.motif <- res$posts.motifs
#motifs <- res$motifs
# more elegant
res <-count_motifs_by_post(df.threads$thread, database='reddit')
df.post.motif  <- res$posts.motifs
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
df.user.motifs <- acast(df.posts, user~motif)
motifs <- res$motifs
motifs
# sort by frequency
idx <- order(colSums(df.user.motifs), decreasing = TRUE)
df.user.motifs <- df.user.motifs[,idx]
motifs <- motifs[idx]
# Put names to the features
#colnames(df.user.motifs) <- c("spot", "lonely answer",  "chain init answer 1", "chain init answer 2",
#                              "common answer 1", "common answer 2", "common answer 3", "star init answer")
# Plot motifs with names
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
plot(motifs[[i]],
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
nrow(df.posts)
colSums(df.user.motifs)
sum(colSums(df.user.motifs))
idx
motifs
# Plot motifs with names
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
plot(motifs[[i]],
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
i
la = layout_as_tree(motifs[[i]])
la = layout_as_tree(motifs[[i]])
plot(motifs[[i]],
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
la = layout_as_tree(motifs[[i]], mode='in')
plot(motifs[[i]],
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
la = layout_as_tree(motifs[[i]], mode='in')
plot(as.undirected(motifs[[i]]),
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
la = layout_as_tree(motifs[[i]], mode='out')
plot(as.undirected(motifs[[i]]),
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
la = layout_as_tree(motifs[[i]])
plot(as.undirected(motifs[[i]]),
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
for(i in 1:length(motifs)){
la = layout_as_tree(motifs[[i]])
plot(as.undirected(motifs[[i]]),
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
la = layout_as_tree(motifs[[i]], model='both')
plot(as.undirected(motifs[[i]]),
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
la = layout_as_tree(motifs[[i]], model='all')
plot(as.undirected(motifs[[i]]),
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
la = layout_as_tree(motifs[[i]], model='in')
plot(as.undirected(motifs[[i]]),
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
la = layout_as_tree(motifs[[i]], mode='in')
plot(as.undirected(motifs[[i]]),
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
# Plot motifs with names
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
la = layout_as_tree(motifs[[i]], mode='out')
plot(as.undirected(motifs[[i]]),
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- motifs[[i]]
la = layout_as_tree(gmotif, mode='out')
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out')
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
# Plot motifs with names
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out')
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
gmotif <- motifs[[i]]
#la = layout_as_tree(gmotif, mode='out')
plot(gmotif,
#    layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
#gmotif <- motifs[[i]]
la = layout_as_tree(gmotif, mode='in')
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
# Plot motifs with names
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
#gmotif <- motifs[[i]]
la = layout_as_tree(gmotif, mode='out')
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
#gmotif <- motifs[[i]]
la = layout_as_tree(motifs[[i]], mode='out')
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
#gmotif <- motifs[[i]]
la = layout_as_tree(motifs[[i]], mode='out')
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
#gmotif <- motifs[[i]]
la = layout_as_tree(gmotif, mode='out')
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
gmotif
gmotif$date
V(gmotif)
V(gmotif)$date
min(V(gmotif)$date)
which.min(V(gmotif)$date)
?layout_as_tree
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
#gmotif <- motifs[[i]]
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
# Plot motifs with names
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
#gmotif <- motifs[[i]]
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
source('~/Documents/PhD/src/Triads_based clustering/R/count_motifs.r')
source('~/Documents/PhD/src/Triads_based clustering/R/count_motifs.r')
active.mask <- rowSums(df.user.motifs)>10
df.features <- normalize_counts(df.user.motifs)
df.features <- df.features[active.mask,] #only active users
###############################################
# Clustering
###############################################
z <- cluster(df.features)
# Update users df with their cluster
tmp <- data.frame(user=rownames(df.features), cluster=z)
df.users <- merge(df.users, tmp, all.x=TRUE)
df.users[is.na(df.users$cluster),]$cluster <- 0
# Assign colors to clusters by size so that we use the same colors all along
cluster.colors <- palette()[2:length(palette())] # 2: to avoid black
# PCA and whisker plots
####################################################
plot.clusters(df.features,
clusters = z,
sizes    = 0.5*log(rowSums(df.user.motifs[active.mask,])),
colors   = alpha(cluster.colors[z], 0.5))
rowSums(df.user.motifs[active.mask,])
cluster.colors[z]
alpha(cluster.colors[z], 0.5))
alpha(cluster.colors[z], 0.5)
library(ggplot2)
alpha(cluster.colors[z], 0.5))
alpha(cluster.colors[z], 0.5)
plot.clusters(df.features,
clusters = z,
sizes    = 0.5*log(rowSums(df.user.motifs[active.mask,])),
colors   = alpha(cluster.colors[z], 0.5))
plot.clusters(df.features,
clusters = z,
sizes    = 0.5*log(rowSums(df.user.motifs[active.mask,])),
colors   = alpha(cluster.colors[z], 0.5))
0.5*log(rowSums(df.user.motifs[active.mask,]))
alpha(cluster.colors[z], 0.5)
library(gplots)
plot.clusters(df.features,
clusters = z,
sizes    = 0.5*log(rowSums(df.user.motifs[active.mask,])),
colors   = alpha(cluster.colors[z], 0.5))
library(ggplot2)
library(ggbiplot)
library(gplots)
####################################################
plot.clusters(df.features,
clusters = z,
sizes    = 0.5*log(rowSums(df.user.motifs[active.mask,])),
colors   = alpha(cluster.colors[z], 0.5))
z <- cluster(df.features)
plot.clusters(df.features,
clusters = z,
sizes    = 0.5*log(rowSums(df.user.motifs[active.mask,])),
colors   = alpha(cluster.colors[z], 0.5))
df.user.motifs
df.user.motifs
nrow(df.user.motifs)
df.user.motifs[rownames(df.user.motifs)=='root',]
rownames(df.user.motifs)=='root'
df.user.motifs[rownames(df.user.motifs)=='root',]
df.user.motifs[rownames(df.user.motifs)!='root',]
nrow(df.user.motifs[rownames(df.user.motifs)!='root',])
df.post.motif  <- res$posts.motifs
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
df.user.motifs <- acast(df.posts, user~motif)
df.user.motifs <- df.user.motifs[rownames(df.user.motifs)!='root',] # remove root
motifs <- res$motifs
# sort by frequency
idx <- order(colSums(df.user.motifs), decreasing = TRUE)
df.user.motifs <- df.user.motifs[,idx]
motifs <- motifs[idx]
# Put names to the features
#colnames(df.user.motifs) <- c("spot", "lonely answer",  "chain init answer 1", "chain init answer 2",
#                              "common answer 1", "common answer 2", "common answer 3", "star init answer")
# Plot motifs with names
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
active.mask <- rowSums(df.user.motifs)>10
df.features <- normalize_counts(df.user.motifs)
df.features <- df.features[active.mask,] #only active users
###############################################
# Clustering
###############################################
z <- cluster(df.features)
# Update users df with their cluster
tmp <- data.frame(user=rownames(df.features), cluster=z)
df.users <- merge(df.users, tmp, all.x=TRUE)
df.users[is.na(df.users$cluster),]$cluster <- 0
# Assign colors to clusters by size so that we use the same colors all along
cluster.colors <- palette()[2:length(palette())] # 2: to avoid black
# PCA and whisker plots
####################################################
plot.clusters(df.features,
clusters = z,
sizes    = 0.5*log(rowSums(df.user.motifs[active.mask,])),
colors   = alpha(cluster.colors[z], 0.5))
source('R/plot_thread_cluster.r')
# Some plots and setting up the matrix to make predictions
#############################################################
# Plot individual relation between participation by cluster vs length
plot.whiskers_cluster_length(df.posts, df.users, df.threads)
library(reshape2)
source('R/plot_thread_cluster.r')
# Some plots and setting up the matrix to make predictions
#############################################################
# Plot individual relation between participation by cluster vs length
plot.whiskers_cluster_length(df.posts, df.users, df.threads)
library(dplyr)
source('R/plot_thread_cluster.r')
# Some plots and setting up the matrix to make predictions
#############################################################
# Plot individual relation between participation by cluster vs length
plot.whiskers_cluster_length(df.posts, df.users, df.threads)
# Plot cluster census by thread
plot.by_thread_cluster(df.posts, df.users)
# Create a dataset where features are the % of users within every role in the first posts
# of a thread, and output is the length of a thread
df.thread_cluster <- by_thread_cluster_nfirst(df.posts, nfirst=10) %>%
merge(df.users, by=c('user')) %>%
acast(thread~cluster) %>%
apply(1, function(x) x/sum(x)) %>%
t %>%
as.data.frame %>%
merge(df.threads, by.x="row.names", by.y="thread") %>% # add length
arrange(length) %>% # sort by length
select(-Row.names) #drop thread names
# Plot it with length column normalized to stay in the same color range than the rest
df.thread_cluster %>%
mutate(length=length/max(length)) %>%
as.matrix %>%
heatmap(Colv=NA, Rowv=NA, labRow=NA, ylab="Threads", xlab="Roles",
main = "Participations by role (10 first posts)")
source('R/pred_regression.r')
# pred_regression(df.thread_cluster)
# Binary lengths
df.thread_cluster <- mutate(df.thread_cluster, length =factor(length > quantile(length,0.5)))
pred_regression(df.thread_cluster)
df.thread_cluster
df.thread_cluster <- by_thread_cluster_nfirst(df.posts, nfirst=10) %>%
merge(df.users, by=c('user')) %>%
acast(thread~cluster) %>%
apply(1, function(x) x/sum(x)) %>%
t %>%
as.data.frame %>%
merge(df.threads, by.x="row.names", by.y="thread") %>% # add length
arrange(length) %>% # sort by length
select(-Row.names) #drop thread names
# Plot it with length column normalized to stay in the same color range than the rest
df.thread_cluster %>%
mutate(length=length/max(length)) %>%
as.matrix %>%
heatmap(Colv=NA, Rowv=NA, labRow=NA, ylab="Threads", xlab="Roles",
main = "Participations by role (10 first posts)")
pred_regression(df.thread_cluster)
df.thread_cluster <- mutate(df.thread_cluster, length =factor(length > quantile(length,0.5)))
library('e1071')
accuracies <- vector()
features <- 1:(ncol(df.thread_cluster)-1)
for(i in 1:1000){
# re-sample train/test
idx <- sample(nrow(df.thread_cluster))
cut <- floor(length(idx)*0.7)
idx.train <- idx[1:cut]
idx.test <- idx[cut:length(idx)]
y.train <- df.thread_cluster$length[idx.train]
y.test <- df.thread_cluster$length[idx.test]
X.train <- as.matrix(df.thread_cluster[idx.train,features])
X.test <- as.matrix(df.thread_cluster[idx.test,features])
# Train model
model <- svm(X.train, y.train, kernel='radial')
# Accuracy in training
preds <- predict(model)
table(preds, y.train)
cat("\nAccuracy:", sum(y.train==preds)/length(y.train))
# Accuracy in test
preds <- predict(model, X.test)
table(preds, y.test)
accuracies[i] <- sum(y.test==preds)/length(y.test)
cat("\nAccuracy:", accuracies[i])
}
cat("Accuracy:", mean(accuracies), "sd:", sd(accuracies))
warnings()
