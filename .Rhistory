df.census$date
as.numeric(df.census$date)
df.census.length$date <- as.numeric(df.census$date)
df.census.length$date
df.census.length
df.census.length <- df.census.length.bck
class(df.census.length)
df.census.length <- as.data.frame(df.census.length)
df.census.length
df.census.length <- df.census.length.bck
df.census.length <- as.data.frame(df.census.length)
df.census.length$date <- df.census$date
df.census.length$thread <- df.census$thread
df.census.length$rank <- rank
df.census.length$rank <- ranks
head(df.census.length)
head(df.census.length,100)
head(df.census.length,10)
?melt(df.census.length, id.vars='rank', varnames = )
melt(df.census.length, id.vars='rank')
head(melt(df.census.length, id.vars='rank'))
head(df.census.length)
head(melt(df.census.length, id.vars=c('date', 'rank', 'thread')))
head(melt(df.census.length, id.vars=c('date', 'rank', 'thread')),100)
head(melt(df.census.length, id.vars=c('date', 'rank', 'thread')),1000)
gg.df.census.length <- melt(df.census.length, id.vars=c('date', 'rank', 'thread'))
data
head(gg.df.census.length)
ggplot(gg.df.census.length, aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
ggplot(select(gg.df.census.length, variable==1), aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
select(gg.df.census.length, variable==1)
head(gg.df.census.length)
select(gg.df.census.length, variable==1)
filter(gg.df.census.length, variable==1)
ggplot(filter(gg.df.census.length, variable==1), aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
?sample
sample.threads <-  sample(unique(df.census.length$thread), 10)
sample.threads
df.census.length
df.census.length
df.census.length$thread
df.census.length
df.census.length.bck
df.census.length <- df.census.length.bck
df.census.length$rank <- ranks
df.census.length$date <- df.census$date
df.census.length$thread <- df.census$thread
df.census.length <- df.census.length.bck
ranks
class(df.census.length)
df.census.length.bck <- as.data.frame(df.census.length.bck)
df.census.length <- df.census.length.bck
df.census.length$rank <- ranks
df.census.length$date <- df.census$date
df.census.length$thread <- df.census$thread
head(df.census.length)
sample.threads <-  sample(unique(df.census.length$thread), 10)
head(df.census.length)
filter(sample.threads, thread %in% sample.threads)
filter(df.census.length, thread %in% sample.threads)
df.census.length.sample <- filter(df.census.length, thread %in% sample.threads)
df.census.length.sample <- melt(df.census.length.sample, id.vars=c('date', 'rank', 'thread'))
df.census.length.sample
ggplot(filter(gg.df.census.length, variable==1), aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
ggplot(filter(df.census.length.sample, variable==1), aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
p <- ggplot(df.census.length.sample, aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
p + + facet_grid(. ~ variable)
p <- ggplot(df.census.length.sample, aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
p + facet_grid(. ~ variable)
p + facet_grid(variable ~ .)
p + facet_grid(~ variable)
df.census.length$thread
df.threads
df.census.length$thread
df.threads
names(df.threads)
df.threads$length>20
df.threads$length>50
sum(df.threads$length>50)
sum(df.threads$length>100)
p <- ggplot(filter(df.census.length.sample, variable%in%c(1,2,3,4,5,6), aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
p + facet_grid(~ variable)
p <- ggplot(filter(df.census.length.sample, variable %in% c(1,2,3,4,5,6)), aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
p + facet_grid(~ variable)
p <- ggplot(filter(df.census.length.sample, variable %in% c(1,2,3,4,5,6)), aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
#p + facet_grid(~ variable)
p + facet_wrap(~ variable; ncol=3)
p <- ggplot(filter(df.census.length.sample, variable %in% c(1,2,3,4,5,6)), aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
p + facet_wrap(~ variable, ncol=3)
?facet_wrap
p <- ggplot(filter(df.census.length.sample, variable %in% c(1,2,3,4,5,6,7,8)), aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
#p + facet_grid(~ variable)
p + facet_wrap(~ variable, ncol=4, nrow=4)
filter(df.threads, length>50)
filter(df.threads, length>100)
filter(df.threads, length>100) %>% select(thread)
sample.threads <- filter(df.threads, length>100) %>% select(thread)
df.census.length.sample <- filter(df.census.length, thread %in% sample.threads)
df.census.length.sample
sample.threads <-  sample(unique(df.census.length$thread), 10) # random
df.census.length.sample <- filter(df.census.length, thread %in% sample.threads)
df.census.length.sample
filter(df.threads, length>100) %>% select(thread)
filter(df.threads, length>100) %>% select(thread) %>% as.vector
filter(df.threads, length>100) %>% select(thread) %>% c
filter(df.threads, length>100) %>% select(thread)
filter(df.threads, length>100) %>% select(thread) %>% as.data.frame
filter(df.threads, length>100) %>% select(thread) %>% as.array
filter(df.threads, length>100) %>% select(thread) %>% as.numeric
filter(df.threads, length>100) %>% select(thread) %>% as.character
filter(df.threads, length>100) %>% select(thread) %>% as.list
filter(df.threads, length>100) %>% select(thread) %>% c
filter(df.threads, length>100) %>% select(thread)
filter(df.threads, length>100) %>% select(thread)$thread
sample.threads <- filter(df.threads, length>100) %>% select(thread)
sample.threads$thread
filter(df.threads, length>100) %>% select(thread)
filter(df.threads, length>100) %>% select(thread) %as.matrix%
)
filter(df.threads, length>100) %>% select(thread) %>% as.matrix
sample.threads <- filter(df.threads, length>100) %>% select(thread)
sample.threads$thread
df.census.length.sample <- filter(df.census.length, thread %in% sample.threads)
df.census.length.sample
sample.threads <-  sample(unique(df.census.length$thread), 10) # random
df.census.length.sample <- filter(df.census.length, thread %in% sample.threads)
df.census.length.sample
head(df.census.length.sample)
sample.threads
sample.threads <- filter(df.threads, length>100) %>% select(thread)
sample.threads <- sample.threads$thread
df.census.length.sample <- filter(df.census.length, thread %in% sample.threads)
df.census.length.sample
sample.threads <- filter(df.threads, length>100) %>% select(thread)
sample.threads <- sample.threads$thread
nrow(sample.threads )
nrow(sample.threads)
nrows(sample.threads)
df.census.length.sample <- filter(df.census.length, thread %in% sample.threads)
nrows(df.census.length.sample)
nrow(df.census.length.sample)
filter(df.threads, length>100) %>% select(thread)
sample.threads <- filter(df.threads, length>100) %>% select(thread)
sample.threads <- sample.threads$thread
sample.threads
df.census.length.sample <- filter(df.census.length, thread %in% sample.threads)
df.census.length.sample
df.census.length.sample <- melt(df.census.length.sample, id.vars=c('date', 'rank', 'thread'))
p <- ggplot(filter(df.census.length.sample, variable %in% c(1,2,3,4,5,6,7,8)), aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
#p + facet_grid(~ variable)
p + facet_wrap(~ variable, ncol=4, nrow=4)
df.census <- arrange(df.posts, date) %>%
acast(date~motif) %>%
as.data.frame
# chronological dates
df.census$date <- rownames(df.census)
# sequential dates
df.census$date <- 1:nrow(df.census)
steps <- seq(min(as.numeric(df.census.cum$date)),
max(as.numeric(df.census.cum$date)),
by=25)
df.census.window <- vector()
for(i in 1:(length(steps)-1)){
df.census.window <- filter(df.census, date>steps[i] & date<steps[i+1]) %>%
select(-date) %>%
colSums %>%
rbind(df.census.window, .)
#rbind(df.census.window) # TODO rbind(df.census.window, .) ?
}
df.census.window <- as.data.frame(df.census.window)
df.census.window$date <- head(steps,-1)
df.census.window <- melt(df.census.window, id.vars=c("date"))
df.census.window$date <- as.POSIXct(df.census.window$date, origin="1970-01-01")
# Plot absolute values to view general trend, periodicity...
ggplot(df.census.window, aes(x=date, y=value, group=variable, color=variable, fill=variable)) +
geom_line()
df.census <- arrange(df.posts, date) %>%
acast(date~motif) %>%
as.data.frame
# chronological dates
df.census$date <- rownames(df.census)
steps <- seq(min(as.numeric(df.census.cum$date)),
max(as.numeric(df.census.cum$date)),
by=3600)
steps <- seq(min(as.numeric(df.census$date)),
max(as.numeric(df.census$date)),
by=3600)
df.census.window <- vector()
for(i in 1:(length(steps)-1)){
df.census.window <- filter(df.census, date>steps[i] & date<steps[i+1]) %>%
select(-date) %>%
colSums %>%
rbind(df.census.window, .)
#rbind(df.census.window) # TODO rbind(df.census.window, .) ?
}
df.census.window <- as.data.frame(df.census.window)
df.census.window$date <- head(steps,-1)
df.census.window <- melt(df.census.window, id.vars=c("date"))
df.census.window$date <- as.POSIXct(df.census.window$date, origin="1970-01-01")
# Plot absolute values to view general trend, periodicity...
ggplot(df.census.window, aes(x=date, y=value, group=variable, color=variable, fill=variable)) +
geom_line()
ggplot(df.census.window, aes(x=date, y=value)) +
geom_bar(aes(group=variable, color=variable, fill=variable),
position = 'fill', stat='identity') +
stat_summary(fun.y=function(x){sum(x)/200}, color = 'black', geom ='line')
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
df.user.motifs <- acast(df.posts, user~motif)
df.user.motifs <- df.user.motifs[rownames(df.user.motifs)!='root',] # remove root
motifs <- res$motifs
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
df.user.motifs <- acast(df.posts, user~motif)
df.user.motifs <- df.user.motifs[rownames(df.user.motifs)!='root',] # remove root
motifs <- res$motifs
# sort by frequency
idx <- order(colSums(df.user.motifs), decreasing = TRUE)
df.user.motifs <- df.user.motifs[,idx]
motifs <- motifs[idx]
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
mypalette <- c("black", "red", "white")
par(mfrow=c(3,4))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
mypalette <- c("black", "red", "white")
par(mfrow=c(4,4))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
mypalette <- c("black", "red", "white")
par(mfrow=c(3,5))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
posts.motifs
posts.motifs
posts.motifs
res$posts.motifs
hist(res$posts.motifs)
hist(res$posts.motifs$motif)
motifs <- res$motifs
par(mfrow=c(1,1))
hist(res$posts.motifs$motif)
motifs <- res$motifs
mypalette <- c("black", "red", "white")
par(mfrow=c(3,5))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(colnames(df.user.motifs)[i]),sub=colSums(df.user.motifs)[i])
}
hist(res$posts.motifs$motif, breaks=40)
sum(res$posts.motifs$motif==27)
sum(res$posts.motifs$motif==21)
sum(res$posts.motifs$motif==27
df.user.motifs
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
df.user.motifs <- acast(df.posts, user~motif)
df.user.motifs
df.user.motifs==root
df.user.motifs=='root'
select(df.user.motifs, 'root')
select(df.user.motifs, root)
filter(df.user.motifs, rowname==root)
filter(df.user.motifs, row.name==root)
df.user.motifs <- dcast(df.posts, user~motif)
df.user.motifs
head(df.user.motifs)
df.post.motif
df.post.motif  <- res$posts.motifs
motifs <- res$motifs
# Sort by frequency
idx <- order(table(df.post.motif$motif), decreasing = TRUE)
motifs <- motifs[idx]
df.post.motif$motif <- match(df.post.motif$motif, idx)
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
####################################################
# Plot neighborhoods by frequency
####################################################
mypalette <- c("black", "red", "white")
par(mfrow=c(3,3))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(i),sub=sum(df.post.motif$motif==i))
}
mypalette <- c("black", "red", "white")
par(mfrow=c(3,5))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(i),sub=sum(df.post.motif$motif==i))
}
ggplot(df.census.window, aes(x=date, y=value, group=variable, color=variable, fill=variable)) +
geom_line()
ggplot(df.census.window, aes(x=date, y=value)) +
geom_bar(aes(group=variable, color=variable, fill=variable),
position = 'fill', stat='identity') +
stat_summary(fun.y=function(x){sum(x)/200}, color = 'black', geom ='line')
p <- ggplot(filter(df.census.length.sample, variable %in% c(1,2,3,4,5,6,7,8)), aes(x=rank, y=value, group=thread, color=thread)) + geom_line()
#p + facet_grid(~ variable)
p + facet_wrap(~ variable, ncol=4, nrow=4)
df.post.motif  <- res$posts.motifs
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
df.user.motifs <- dcast(df.posts, user~motif)
df.user.motifs <- df.user.motifs[rownames(df.user.motifs)!='root',] # remove root
motifs <- res$motifs
# Sort by frequency
idx <- order(table(df.post.motif$motif), decreasing = TRUE)
motifs <- motifs[idx]
df.post.motif$motif <- match(df.post.motif$motif, idx)
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
####################################################
# Plot neighborhoods by frequency
####################################################
mypalette <- c("black", "red", "white")
par(mfrow=c(3,5))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(i),sub=sum(df.post.motif$motif==i))
}
active.mask <- rowSums(df.user.motifs)>10
df.features <- normalize_counts(df.user.motifs)
df.features <- df.features[active.mask,] #only active users
source('R/normalize_counts.r')
active.mask <- rowSums(df.user.motifs)>10
df.features <- normalize_counts(df.user.motifs)
df.features <- df.features[active.mask,] #only active users
normalize_counts(df.user.motifs)
Q
head(df.user.motifs)
df.user.motifs[,colSums(df.user.motifs)>0]
as.matrix(df.user.motifs)
head(as.matrix(df.user.motifs))
df.user.motifs <- select(df.user.motifs, -user) %>%
)
df.user.motifs <- select(df.user.motifs, -user)
df.user.motifs
cat("\nMotifs counts:", colSums(df.user.motifs))
df.user.motifs[rowSums(df.user.motifs)>0,]
nrow(df.user.motifs[rowSums(df.user.motifs)>0,])
nrow(df.user.motifs)
as.data.frame(t(apply(df.user.motifs, 1, function(x) x/sum(x))))
cat("\nMotifs counts:", colSums(df.user.motifs))
# Normalize user activity (make the analysis independent of number of posts)
df.user.motifs <- as.data.frame(t(apply(df.user.motifs, 1, function(x) x/sum(x))))
cat("\nMotifs % of active users:", colSums(df.user.motifs))
df.post.motif  <- res$posts.motifs
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
df.user.motifs <- dcast(df.posts, user~motif)
df.user.motifs <- df.user.motifs[rownames(df.user.motifs)!='root',] # remove root
motifs <- res$motifs
# Sort by frequency
idx <- order(table(df.post.motif$motif), decreasing = TRUE)
motifs <- motifs[idx]
df.post.motif$motif <- match(df.post.motif$motif, idx)
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
df.user.motifs <- select(df.user.motifs, -user) %>%
cat("\nMotifs counts:", colSums(df.user.motifs))
select(df.user.motifs, -user)
df.user.motifs <- select(df.user.motifs, -user)
cat("\nMotifs counts:", colSums(df.user.motifs))
apply(df.user.motifs, 1, function(x) x/sum(x)
)
class(df.user.motifs)
?apply
apply(df.user.motifs, 1, function(x) x/sum(x))
t(apply(df.user.motifs, 1, function(x) x/sum(x)))
class(t(apply(df.user.motifs, 1, function(x) x/sum(x))))
as.data.frame(t(apply(df.user.motifs, 1, function(x) x/sum(x))))
rowSums(as.data.frame(t(apply(df.user.motifs, 1, function(x) x/sum(x)))))
df.user.motifs <- as.data.frame(t(apply(df.user.motifs, 1, function(x) x/sum(x))))
cat("\nMotifs % of active users:", colSums(df.user.motifs))
df.user.motifs <- as.data.frame(scale(df.user.motifs))
cat("\nMotifs % of active users (z-score):", colSums(df.user.motifs))
df.features <- normalize_counts(df.user.motifs)
df.features <- normalize_counts(df.user.motifs)
df.features <- normalize_counts(df.user.motifs)
df.features <- normalize_counts(df.user.motifs)
df.features
df.features <- df.features[active.mask,] #only active users
active.mask <- rowSums(df.user.motifs)>10
df.features <- df.features[active.mask,] #only active users
z <- cluster(df.features)
source('R/clustering.r')
z <- cluster(df.features)
# Update users df with their cluster
tmp <- data.frame(user=rownames(df.features), cluster=z)
df.users <- merge(df.users, tmp, all.x=TRUE)
df.users[is.na(df.users$cluster),]$cluster <- 0
cluster(df.features)
df.features
df.features <- normalize_counts(df.user.motifs)
df.features
head(df.features)
df.features[active.mask,]
active.mask
rowSums(df.user.motifs)>10
sum(rowSums(df.user.motifs)>10)
df.user.motifs
df.post.motif  <- res$posts.motifs
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
df.user.motifs <- acast(df.posts, user~motif)
df.user.motifs <- df.user.motifs[rownames(df.user.motifs)!='root',] # remove root
motifs <- res$motifs
# Sort by frequency
idx <- order(table(df.post.motif$motif), decreasing = TRUE)
motifs <- motifs[idx]
df.post.motif$motif <- match(df.post.motif$motif, idx)
df.posts <- merge(df.posts, df.post.motif, all.x=TRUE, sort=FALSE)
####################################################
# Plot neighborhoods by frequency
####################################################
mypalette <- c("black", "red", "white")
par(mfrow=c(3,5))
for(i in 1:length(motifs)){
gmotif <- as.undirected(motifs[[i]])
la = layout_as_tree(gmotif, mode='out', root=which.min(V(gmotif)$date))
plot(gmotif,
layout = la,
vertex.color=mypalette[V(motifs[[i]])$color],
vertex.label = "",
edge.arrow.size=0.6)
title(paste(i),sub=sum(df.post.motif$motif==i))
}
active.mask <- rowSums(df.user.motifs)>10
df.features <- normalize_counts(df.user.motifs)
df.features <- df.features[active.mask,] # only active users
z <- cluster(df.features)
par(mfrow=c(1,1))
z <- cluster(df.features)
# Update users df with their cluster
tmp <- data.frame(user=rownames(df.features), cluster=z)
df.users <- merge(df.users, tmp, all.x=TRUE)
df.users[is.na(df.users$cluster),]$cluster <- 0
# Assign colors to clusters by size so that we use the same colors all along
cluster.colors <- palette()[2:length(palette())] # 2: to avoid black
# PCA and whisker plots
####################################################
plot.clusters(df.features,
clusters = z,
sizes    = 0.5*log(rowSums(df.user.motifs[active.mask,])),
colors   = alpha(cluster.colors[z], 0.5))
library(ggbiplot)
plot.clusters(df.features,
clusters = z,
sizes    = 0.5*log(rowSums(df.user.motifs[active.mask,])),
colors   = alpha(cluster.colors[z], 0.5))
